#ifndef __FTE_MBTCP_MASTER_H__
#define __FTE_MBTCP_MASTER_H__

#include "fte_target.h"
#include <rtcs.h>
#include <libemqtt.h>
#include "fte_list.h"
#include "fte_sys_timer.h"

#ifndef FTE_MBTCP_MASTER_DEFAULT_PORT   
#define FTE_MBTCP_MASTER_DEFAULT_PORT       502
#endif

#ifndef FTE_MBTCP_MASTER_DEFAULT_KEEPALIVE
#define FTE_MBTCP_MASTER_DEFAULT_KEEPALIVE  180
#endif

#define FTE_MBTCP_MASTER_CLIENT_ID_LENGTH   64
#define FTE_MBTCP_MASTER_USERNAME_LENGTH    64
#define FTE_MBTCP_MASTER_PASSWORD_LENGTH    64
#define FTE_MBTCP_MASTER_TOPIC_LENGTH       128
#define FTE_MBTCP_MASTER_IP_LENGTH          128
#define FTE_MBTCP_MASTER_BUFFER_SIZE        250
#define FTE_MBTCP_MASTER_TRANS_COUNT        10

#define FTE_MBTCP_MASTER_RET_OK                             (MQX_OK)
#define FTE_MBTCP_MASTER_RET_ERROR                          (RTCS_ERROR_BASE|0xF00)
#define FTE_MBTCP_MASTER_RET_NOT_CONNECTED                  (RTCS_ERROR_BASE|0xF01)
#define FTE_MBTCP_MASTER_RET_READ_ABOARTED                  (RTCS_ERROR_BASE|0xF02)
#define FTE_MBTCP_MASTER_RET_UNACCEPTABLE_PROTOCOL_VERSION  (RTCS_ERROR_BASE|0xF03)
#define FTE_MBTCP_MASTER_RET_IDENTIFIER_REJECTED            (RTCS_ERROR_BASE|0xF04)
#define FTE_MBTCP_MASTER_RET_SERVER_UNAVALIABLE             (RTCS_ERROR_BASE|0xF05)
#define FTE_MBTCP_MASTER_RET_BAD_USER_NAME_OR_PASSWORD      (RTCS_ERROR_BASE|0xF06)
#define FTE_MBTCP_MASTER_RET_NOT_AUTHORIZED                 (RTCS_ERROR_BASE|0xF07)
#define FTE_MBTCP_MASTER_RET_OPERATION_NOT_PERMITTED        (RTCS_ERROR_BASE|0xF08)
#define FTE_MBTCP_MASTER_RET_USBSCRIBE_ERROR                (RTCS_ERROR_BASE|0xF09)
#define FTE_MBTCP_MASTER_RET_INVALID_TOPIC                  (RTCS_ERROR_BASE|0xF0A)
#define FTE_MBTCP_MASTER_RET_INVALID_PARAMS                 (RTCS_ERROR_BASE|0xF0B)
#define FTE_MBTCP_MASTER_RET_NOT_ENOUGH_MEMORY              (RTCS_ERROR_BASE|0xF0C)
#define FTE_MBTCP_MASTER_RET_TCP_CONN_ABORTED               (RTCS_ERROR_BASE|0xF0D)
#define FTE_MBTCP_MASTER_RET_NOT_INITIALIZED                (RTCS_ERROR_BASE|0xF0E)
#define FTE_MBTCP_MASTER_RET_SEND_FAILED                    (RTCS_ERROR_BASE|0xF0F)
#define FTE_MBTCP_MASTER_RET_INVALID_FRAME_RECEIVED         (RTCS_ERROR_BASE|0xF10)

#define FTE_MBTCP_MASTER_QOS_0              0
#define FTE_MBTCP_MASTER_QOS_1              1
#define FTE_MBTCP_MASTER_QOS_2              2

#define FTE_MBTCP_MASTER_CMD_REQ            1
#define FTE_MBTCP_MASTER_CMD_INFO           2

#define FTE_MBTCP_MASTER_TARGET_SERVER      1
#define FTE_MBTCP_MASTER_TARGET_GATEWAY     2
#define FTE_MBTCP_MASTER_TARGET_LID         3
#define FTE_MBTCP_MASTER_TARGET_UID         4
#define FTE_MBTCP_MASTER_TARGET_BROADCAST   5

typedef enum
{
    FTE_MBTCP_MASTER_MSG_INVALID  = 0,
    FTE_MBTCP_MASTER_MSG_DEV_INFO,
    FTE_MBTCP_MASTER_MSG_DEV_VALUE,
    FTE_MBTCP_MASTER_MSG_EP_INFO,
    FTE_MBTCP_MASTER_MSG_EP_VALUE,
    FTE_MBTCP_MASTER_MSG_GET_VALUE,
    FTE_MBTCP_MASTER_MSG_SET_VALUE,
}   FTE_MBTCP_MASTER_MSG_TYPE, _PTR_ FTE_MBTCP_MASTER_MSG_TYPE_PTR;

typedef enum
{
    FTE_MBTCP_MASTER_METHOD_INVALID,
    FTE_MBTCP_MASTER_METHOD_SET_PROPERTY,
    FTE_MBTCP_MASTER_METHOD_CONTROL_ACTUATOR,
    FTE_MBTCP_MASTER_METHOD_TIME_SYNC,
    FTE_MBTCP_MASTER_METHOD_FTLM_DEVICE_GET,
    FTE_MBTCP_MASTER_METHOD_FTLM_DEVICE_SET,
    FTE_MBTCP_MASTER_METHOD_FTLM_GROUP_GET,
    FTE_MBTCP_MASTER_METHOD_FTLM_GROUP_SET
}   FTE_MBTCP_MASTER_METHOD_TYPE, _PTR_ FTE_MBTCP_MASTER_METHOD_TYPE_PTR;

typedef enum
{
    FTE_MBTCP_MASTER_STATE_UNINITIALIZED = 0,
    FTE_MBTCP_MASTER_STATE_INITIALIZED,
    FTE_MBTCP_MASTER_STATE_CONNECTED,
    FTE_MBTCP_MASTER_STATE_DISCONNECTED
}   FTE_MBTCP_MASTER_STATE, _PTR_ FTE_MBTCP_MASTER_STATE_PTR;

typedef struct
{
    FTE_UINT8           ulUnitID;
    FTE_BOOL            bEnable;
    _ip_address         xIPAddress;
    FTE_UINT16          usPort;
    FTE_UINT16          usOffset;
    FTE_UINT32          ulKeepalive;
}   FTE_MBTCP_MASTER_CFG, _PTR_ FTE_MBTCP_MASTER_CFG_PTR;

typedef struct
{
    FTE_INT32                   nSocketID;
    FTE_MBTCP_MASTER_STATE      xState;
    FTE_MBTCP_MASTER_CFG_PTR    pConfig;
    FTE_LIST                    xMsgPool;
    FTE_UINT8                   pSendBuffer[FTE_MBTCP_MASTER_BUFFER_SIZE];
    FTE_UINT32                  ulSendLen;
    FTE_UINT8                   pRcvdBuffer[FTE_MBTCP_MASTER_BUFFER_SIZE];
    FTE_UINT32                  ulRcvdLen;
    FTE_UINT32                  ulTransactionID;
    TIME_STRUCT                 xTime;
    FTE_TIMER_ID            xPingTimer;
    FTE_UINT32              ulPingTimeout;
}   FTE_MBTCP_MASTER, _PTR_ FTE_MBTCP_MASTER_PTR;

typedef struct
{
    FTE_UINT16     nMsgID;
    FTE_UINT32     nMsgType;    
    FTE_UINT32     nQoS;
    TIME_STRUCT xTime;
}   FTE_MBTCP_MASTER_TRANS, _PTR_ FTE_MBTCP_MASTER_TRANS_PTR;

typedef _mqx_uint   (*FTE_MBTCP_MASTER_METHOD_CALLBACK)(void _PTR_ pParams);

typedef struct
{
    FTE_MBTCP_MASTER_METHOD_TYPE        xMethod;
    FTE_CHAR_PTR                pString;
    FTE_MBTCP_MASTER_METHOD_CALLBACK    fCallback;
}   FTE_MBTCP_MASTER_METHOD, _PTR_ FTE_MBTCP_MASTER_METHOD_PTR;

FTE_UINT32 FTE_MBTCP_MASTER_load_default(FTE_MBTCP_MASTER_CFG_PTR pConfig);
FTE_UINT32 FTE_MBTCP_MASTER_init(FTE_MBTCP_MASTER_CFG_PTR pConfigs, FTE_UINT32 nCount);

FTE_UINT32  FTE_MBTCP_MASTER_readRegisters(FTE_UINT32 ulID, FTE_UINT32 ulAddress, FTE_UINT32 ulCount, FTE_UINT16_PTR pRegisters);
FTE_UINT32  FTE_MBTCP_MASTER_writeRegister(FTE_UINT32 ulID, FTE_UINT32 ulAddress, FTE_UINT16 ulValue);

FTE_BOOL    FTE_MBTCP_MASTER_isConnected(FTE_UINT32 ulID);

FTE_INT32  FTE_MBTCP_MASTER_SHELL_cmd(FTE_INT32 nArgc, FTE_CHAR_PTR pArgv[]);
#endif
